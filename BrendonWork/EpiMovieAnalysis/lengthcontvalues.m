function [values,outvalues,backs]=lengthcontvalues (pixels,conts,outconts,lengths);
% function [values,backs]=lengthcontvalues (pixels,conts,lengths);

%Takes df/f for each movie
%
%finds mean value in each contour of df/f(from 2D conts
%which is a cell array of coordinates created in "findcells") 
%in each frame of each movie represented in 3D moviematrix (generated by
%"inputmovie" function).  Output is "values" which is a 2D matrix
%of (frame)x(cellnumber)... the value at each point in the matrix
%represents the mean pixel value in the given cell in the given frame.

%length is a matrix which specifies the length of each movie in the
%original files.  Here it serves to delete values of frames at the beginning and end
%of each movie which should not be subtracted from each other.

tic
warning off MATLAB:conversionToLogical;

template=zeros(256);
for contournumber = 1:(length(conts));
    for ycounter=1:256;
        yc=ycounter(ones(1,256));
        in=inpolygon(1:256,yc,conts{contournumber}(:,1),conts{contournumber}(:,2));%a 1D line of 
%                                                                             0's and 1's for all x's across 1 y value     
        inout=inpolygon(1:256,yc,outconts{contournumber}(:,1),outconts{contournumber}(:,2));        
        inmatrix(ycounter,:)=in;%a matrix of the pixels inside a given contour... 2D by the time the for-loop is over
        inoutmatrix(ycounter,:)=inout;    
    end
    template=inmatrix+template;%create a template w/ 1's wherever inside any cell, 0 outside... for whole-frame background
    inmatrix=logical(inmatrix);
    i(:,:,contournumber)=inmatrix;%matrix of ins for each cell contour
    inoutmatrix(inmatrix)=0;%eliminate from the outside contour all pixels that are a part of the original contour
    inoutmatrix=logical(inoutmatrix);
    io(:,:,contournumber)=inoutmatrix;
end 

template=logical(template);
template=~template;%now 1's outside cells, 0s inside

rtemplate=repmat(~template,[1,1,length(conts)]);
io(rtemplate)=0;%eliminating from outconts the pixels which are in other cells
io=logical(io);
rtemplate=[];%eliminating unneeded variable

for framenumber=1:size(pixels,3)-1;
    frame=pixels(:,:,framenumber+1)-pixels(:,:,framenumber);%taking diff of each frame
    backs(framenumber,1)=mean(frame(template));
    for contournumber = 1:(length(conts));
        values(framenumber,contournumber)=mean(frame(i(:,:,contournumber)));
        outvalues(framenumber,contournumber)=mean(frame(io(:,:,contournumber)));
    end
end

lengths=cumsum(lengths);%gives #'s of frames which should not be subtracted from each other
lengths(end)=[];%delete last values b/c that frame does not exist in 
values(lengths,:,:)=[];%eliminate values from invalid subtractions
outvalues(lengths,:,:)=[];
backs(lengths)=[];

toc